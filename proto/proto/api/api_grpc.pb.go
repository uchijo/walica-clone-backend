// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WalicaCloneApi_AddPayment_FullMethodName    = "/api.WalicaCloneApi/AddPayment"
	WalicaCloneApi_CreateEvent_FullMethodName   = "/api.WalicaCloneApi/CreateEvent"
	WalicaCloneApi_ReadInfo_FullMethodName      = "/api.WalicaCloneApi/ReadInfo"
	WalicaCloneApi_UpdatePayment_FullMethodName = "/api.WalicaCloneApi/UpdatePayment"
	WalicaCloneApi_ReadAllUsers_FullMethodName  = "/api.WalicaCloneApi/ReadAllUsers"
	WalicaCloneApi_ReadPayment_FullMethodName   = "/api.WalicaCloneApi/ReadPayment"
)

// WalicaCloneApiClient is the client API for WalicaCloneApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalicaCloneApiClient interface {
	AddPayment(ctx context.Context, in *AddPaymentRequest, opts ...grpc.CallOption) (*AddPaymentReply, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventReply, error)
	ReadInfo(ctx context.Context, in *ReadInfoRequest, opts ...grpc.CallOption) (*ReadInfoReply, error)
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentReply, error)
	ReadAllUsers(ctx context.Context, in *ReadAllUsersRequest, opts ...grpc.CallOption) (*ReadAllUsersReply, error)
	ReadPayment(ctx context.Context, in *ReadPaymentRequest, opts ...grpc.CallOption) (*ReadPaymentReply, error)
}

type walicaCloneApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWalicaCloneApiClient(cc grpc.ClientConnInterface) WalicaCloneApiClient {
	return &walicaCloneApiClient{cc}
}

func (c *walicaCloneApiClient) AddPayment(ctx context.Context, in *AddPaymentRequest, opts ...grpc.CallOption) (*AddPaymentReply, error) {
	out := new(AddPaymentReply)
	err := c.cc.Invoke(ctx, WalicaCloneApi_AddPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walicaCloneApiClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventReply, error) {
	out := new(CreateEventReply)
	err := c.cc.Invoke(ctx, WalicaCloneApi_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walicaCloneApiClient) ReadInfo(ctx context.Context, in *ReadInfoRequest, opts ...grpc.CallOption) (*ReadInfoReply, error) {
	out := new(ReadInfoReply)
	err := c.cc.Invoke(ctx, WalicaCloneApi_ReadInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walicaCloneApiClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentReply, error) {
	out := new(UpdatePaymentReply)
	err := c.cc.Invoke(ctx, WalicaCloneApi_UpdatePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walicaCloneApiClient) ReadAllUsers(ctx context.Context, in *ReadAllUsersRequest, opts ...grpc.CallOption) (*ReadAllUsersReply, error) {
	out := new(ReadAllUsersReply)
	err := c.cc.Invoke(ctx, WalicaCloneApi_ReadAllUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walicaCloneApiClient) ReadPayment(ctx context.Context, in *ReadPaymentRequest, opts ...grpc.CallOption) (*ReadPaymentReply, error) {
	out := new(ReadPaymentReply)
	err := c.cc.Invoke(ctx, WalicaCloneApi_ReadPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalicaCloneApiServer is the server API for WalicaCloneApi service.
// All implementations should embed UnimplementedWalicaCloneApiServer
// for forward compatibility
type WalicaCloneApiServer interface {
	AddPayment(context.Context, *AddPaymentRequest) (*AddPaymentReply, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventReply, error)
	ReadInfo(context.Context, *ReadInfoRequest) (*ReadInfoReply, error)
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentReply, error)
	ReadAllUsers(context.Context, *ReadAllUsersRequest) (*ReadAllUsersReply, error)
	ReadPayment(context.Context, *ReadPaymentRequest) (*ReadPaymentReply, error)
}

// UnimplementedWalicaCloneApiServer should be embedded to have forward compatible implementations.
type UnimplementedWalicaCloneApiServer struct {
}

func (UnimplementedWalicaCloneApiServer) AddPayment(context.Context, *AddPaymentRequest) (*AddPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPayment not implemented")
}
func (UnimplementedWalicaCloneApiServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedWalicaCloneApiServer) ReadInfo(context.Context, *ReadInfoRequest) (*ReadInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadInfo not implemented")
}
func (UnimplementedWalicaCloneApiServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedWalicaCloneApiServer) ReadAllUsers(context.Context, *ReadAllUsersRequest) (*ReadAllUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllUsers not implemented")
}
func (UnimplementedWalicaCloneApiServer) ReadPayment(context.Context, *ReadPaymentRequest) (*ReadPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPayment not implemented")
}

// UnsafeWalicaCloneApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalicaCloneApiServer will
// result in compilation errors.
type UnsafeWalicaCloneApiServer interface {
	mustEmbedUnimplementedWalicaCloneApiServer()
}

func RegisterWalicaCloneApiServer(s grpc.ServiceRegistrar, srv WalicaCloneApiServer) {
	s.RegisterService(&WalicaCloneApi_ServiceDesc, srv)
}

func _WalicaCloneApi_AddPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalicaCloneApiServer).AddPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalicaCloneApi_AddPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalicaCloneApiServer).AddPayment(ctx, req.(*AddPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalicaCloneApi_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalicaCloneApiServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalicaCloneApi_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalicaCloneApiServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalicaCloneApi_ReadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalicaCloneApiServer).ReadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalicaCloneApi_ReadInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalicaCloneApiServer).ReadInfo(ctx, req.(*ReadInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalicaCloneApi_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalicaCloneApiServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalicaCloneApi_UpdatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalicaCloneApiServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalicaCloneApi_ReadAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalicaCloneApiServer).ReadAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalicaCloneApi_ReadAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalicaCloneApiServer).ReadAllUsers(ctx, req.(*ReadAllUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalicaCloneApi_ReadPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalicaCloneApiServer).ReadPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalicaCloneApi_ReadPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalicaCloneApiServer).ReadPayment(ctx, req.(*ReadPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalicaCloneApi_ServiceDesc is the grpc.ServiceDesc for WalicaCloneApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalicaCloneApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.WalicaCloneApi",
	HandlerType: (*WalicaCloneApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPayment",
			Handler:    _WalicaCloneApi_AddPayment_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _WalicaCloneApi_CreateEvent_Handler,
		},
		{
			MethodName: "ReadInfo",
			Handler:    _WalicaCloneApi_ReadInfo_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _WalicaCloneApi_UpdatePayment_Handler,
		},
		{
			MethodName: "ReadAllUsers",
			Handler:    _WalicaCloneApi_ReadAllUsers_Handler,
		},
		{
			MethodName: "ReadPayment",
			Handler:    _WalicaCloneApi_ReadPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
